#! /QOpenSys/pkgs/bin/bash

# Licensed Materials - Property of IBM
# 57XX-XXX
# (c) Copyright IBM Corp. 2021

# @author Tongkun
#
# Usage: makei [target]
#
# Wrapper around `make` command so that runs make in every subdirectory if possible.
# If enableLog is true, its output can be captured and logged into
# a log directory.  The directory name is gleaned by scraping the output of IBMiMake.

#
# A named pipe is created, and a reader process (`tee`) is started in the background.  Make's
# output is redirected to the pipe, where the reader writes it to both stdout and a log file.
# The complexity is needed because merely using `tee` loses Make's exit code.  An alternate
# solution, redirecting Make's output to a file and later sending it to stdout.
#

# ----------------------------------
# Colors
# ----------------------------------
# COLORBOB=true
# COLORBOB=false
BOB=/QOpenSys/pkgs/lib/bob
MK=${BOB}/mk
. ${MK}/filetypeTargetMap.inc

if [ "$COLORBOB" = true ]; then
    BOLD='\033[1m'
    NOCOLOR='\033[0m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    ORANGE='\033[0;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    LIGHTGRAY='\033[0;37m'
    DARKGRAY='\033[1;30m'
    LIGHTRED='\033[1;31m'
    LIGHTGREEN='\033[1;32m'
    YELLOW='\033[1;33m'
    LIGHTBLUE='\033[1;34m'
    LIGHTPURPLE='\033[1;35m'
    LIGHTCYAN='\033[1;36m'
    WHITE='\033[1;37m'
else
    COLORBOB=false
    BOLD=''
    NOCOLOR=''
    RED=''
    GREEN=''
    ORANGE=''
    BLUE=''
    PURPLE=''
    CYAN=''
    LIGHTGRAY=''
    DARKGRAY=''
    LIGHTRED=''
    LIGHTGREEN=''
    YELLOW=''
    LIGHTBLUE=''
    LIGHTPURPLE=''
    LIGHTCYAN=''
    WHITE=''
fi

retrieve_from_iproj() {
    local key=$1
    local default_vaule=$2
    local value
    value=$(jq -r ".${key}" iproj.json)
    if [[ $value = null || $value = "" ]]; then
        echo "$default_vaule"
    else
        echo "$value"
    fi
}

retrieve_from_ibmijson() {
    local pathToIbmiJson=$1
    local key=$2
    local default_vaule=$3
    local value
    value=$(jq -r ".${key}" "${pathToIbmiJson}")
    if [[ $value = null || $value = "" ]]; then
        echo "$default_vaule"
    else
        echo "$value"
    fi
}

clean_up() {
    echo -e "${BLUE}Cleaning up... ${NOCOLOR}"
    echo
    # rm -rf "${BUILDVARSMK}"
}

parse_placeholder() {
    local varName=$1
    if [[ $varName =~ ^\&.* ]]; then
        varName=${varName//&/}
        if [ -z "${!varName}" ]; then
            echo -e "${RED}makei: $BOLD${varName}$RED must be defined first in the environment variable.${NOCOLOR}" >&2
            exit 1
        fi
        echo "${!varName}"
    else
        echo "${varName}"
    fi
}

recursive_generate() {
    local dir=$1
    local parentObjLoc=${2//&/}
    local parentCcsid=$3
    local objlibraw
    local tgtCcsid
    cd "$dir" || (
        echo "${dir} not found"
        exit 1
    )

    if [[ -f ".ibmi.json" ]]; then
        objlibraw=$(retrieve_from_ibmijson ".ibmi.json" "build.objlib" "")
        tgtCcsid=$(retrieve_from_ibmijson ".ibmi.json" "build.tgtCcsid" "")
    fi
    local objlib=$(parse_placeholder "$objlibraw")
    if test $? -ne 0; then
        exit 1
    fi

    if [[ $objlib == "*CURLIB" ]]; then
        objlib=$curlib
    fi

    if [ -z "${objlib}" ]; then
        local objPath=
    else
        local objPath=/QSYS.LIB/${objlib}.LIB
    fi

    # If ObjLoc and tgtCcsid are not defined, then use the parent's configuration
    objPath="${objPath:-$parentObjLoc}"
    tgtCcsid="${tgtCcsid:-$parentCcsid}"

    if [[ -f "Rules.mk" ]]; then
        echo "TGTCCSID_$(pwd) := ${tgtCcsid}" >>"$BUILDVARSMK"
        echo "OBJPATH_$(pwd) := $objPath" >>"$BUILDVARSMK"

        grep -v ":=" Rules.mk | grep -v "#" | cut -d':' -f1 | grep . | sort | uniq | while read line ; do
            echo "${line}_d := $dir" >>"$BUILDVARSMK"
        done

        for f in "$dir"/*; do
            if [[ -d $f ]]; then
                recursive_generate "$f" "$objPath" "$tgtCcsid"
                if test $? -ne 0; then
                    exit 1
                fi
                cd ..
            fi
        done
    fi
}

main() {
    exitCode=0

    while getopts ":z:" options
    do
        case $options in
            z ) filename=$OPTARG;;
            * ) ;;
        esac
    done
    
    shift $(($OPTIND - 1))
    makeOpts=$*
    srcDir="$(pwd)"

    rm -rf "${srcDir}/logs/output.log"
    rm -rf "${srcDir}/logs/joblog.json"

    if [ ! -f "${srcDir}/Makefile" ]; then
        MAKEFILE="/QOpenSys/pkgs/lib/bob/Makefile"
    else
        MAKEFILE="${srcDir}/Makefile"
    fi

    echo -e "${BLUE}makei: Reading from iproj.json${NOCOLOR}"
    objlib=$(parse_placeholder $(retrieve_from_iproj objlib "*CURLIB"))
    curlib=$(parse_placeholder $(retrieve_from_iproj curlib "*CURLIB"))
    tgtCcsid=$(retrieve_from_iproj tgtccsid "*JOB")
    IBMiEnvCmdList=$(retrieve_from_iproj setIBMiEnvCmd[] "")
    preUsrliblRaw=$(retrieve_from_iproj preUsrlibl[] "")
    postUsrliblRaw=$(retrieve_from_iproj postUsrlibl[] "")
    preUsrlibl=""
    postUsrlibl=""

    if [[ $curlib == "*CRTDFT" ]]; then
        curlib="QGPL"
    fi

    if [ -z "${curlib}" ]; then
        curlib="$(liblist | grep CUR | awk '{print $1}')"
    fi

    for lib in $preUsrliblRaw; do
        preUsrlibl+="$(parse_placeholder "$lib") "
    done

    for lib in $postUsrliblRaw; do
        postUsrlibl+="$(parse_placeholder "$lib") "
    done

    echo -e "${DARKGRAY}......${NOCOLOR}objlib: ${ORANGE}${objlib}${NOCOLOR}"
    echo -e "${DARKGRAY}......${NOCOLOR}curlib: ${ORANGE}${curlib}${NOCOLOR}"
    echo -e "${DARKGRAY}......${NOCOLOR}tgtCcsid: ${ORANGE}${tgtCcsid}${NOCOLOR}"
    echo -e "${DARKGRAY}......${NOCOLOR}IBMiEnvCmdList: ${ORANGE}${IBMiEnvCmdList}${NOCOLOR}"
    echo -e "${DARKGRAY}......${NOCOLOR}preUsrlibl: ${ORANGE}${preUsrlibl}${NOCOLOR}"
    echo -e "${DARKGRAY}......${NOCOLOR}postUsrlibl: ${ORANGE}${postUsrlibl}${NOCOLOR}"
    echo

    BUILDVARSMK=$(mktemp)

    {
        echo "# This file is generated using makei, DO NOT EDIT."
        echo "# Modify .ibmi.json to override values"
        echo
        echo "curlib := ${curlib}"
        echo "preUsrlibl := ${preUsrlibl}"
        echo "postUsrlibl := ${postUsrlibl}"
        while read -r cmd; do
            IBMiEnvCmd+="cl '$cmd' > /dev/null 2>&1 && "
        done <<<"$IBMiEnvCmdList"
        echo "IBMiEnvCmd := $(echo "$IBMiEnvCmd" | sed 's/&& $//')"
    } >>"$BUILDVARSMK"

    echo -e "${BLUE}Generating makefile for build variables at ${BUILDVARSMK}${NOCOLOR}"
    echo
    recursive_generate "$srcDir" "/QSYS.LIB/${objlib}.LIB" "$tgtCcsid"
    ibmijsonError=$?

    targetName=$(get_target_from_srcfile "$filename");

    if test $ibmijsonError -eq 0; then
        echo -e ">> ${GREEN}"make -k BUILDVARSMKPATH="${BUILDVARSMK}" COLOR_TTY="${COLORBOB}" -f "$MAKEFILE" $makeOpts $targetName"${NOCOLOR}"
        make -k BUILDVARSMKPATH="${BUILDVARSMK}" COLOR_TTY="${COLORBOB}" -f "$MAKEFILE" $makeOpts $targetName
        echo

        exitCode=$?
    else
        echo
        clean_up
        exit $ibmijsonError
    fi

    clean_up
    echo -e "${BLUE}Done.${NOCOLOR}"

    exit $exitCode

}

# Execute main() if this is run in standalone mode (i.e. not in a unit test).
ARGV0="$(basename "$0")"
argv0="$(echo "${ARGV0}" |sed 's/_test$//;s/_test\.sh$//')"
if [ "${ARGV0}" = "${argv0}" ]; then
  main "$@"
fi
